class Solution {
    public int[][] merge(int[][] intervals) {
        List<int[]> ans=new ArrayList<int[]>();
        
        Arrays.sort(intervals,(a,b)-> a[0]-b[0]);
        int s=intervals[0][0];
        int e=intervals[0][1];
        
        for(int[] arr: intervals){
            if(arr[0]<=e)
                e=Math.max(e,arr[1]);
            else{
                ans.add(new int[]{s,e});
                s=arr[0];
                e=arr[1];
            }
        }
        ans.add(new int[]{s,e});
        return ans.toArray(new int[0][]);
    }
    // public int[][] merge(int[][] intervals) {
    //     Arrays.sort(intervals,(a,b)-> a[0]-b[0]);
    //     int s=intervals[0][0],e=intervals[0][1];
    //     int len=intervals.length;
    //     ArrayList<ArrayList<Integer>> list=new ArrayList<ArrayList<Integer>>();
    //     for(int i=0;i<len;i++){
    //         if(i==len-1){
    //             list.add(new ArrayList<>(Arrays.asList(s,e)));
    //             break;
    //         }
    //         if(e>=intervals[i+1][0]){
    //            if(e<intervals[i+1][1])
    //                e=intervals[i+1][1];
    //             if(s>intervals[i+1][0])
    //                 s=intervals[i+1][0];
    //             if((i+1)==(len-1)){
    //                 list.add(new ArrayList<>(Arrays.asList(s,e)));
    //                 break;
    //             }
    //             // i=i+1;
    //         }
    //         else{
    //             list.add(new ArrayList<>(Arrays.asList(s,e)));
    //             s=intervals[i+1][0];
    //             e=intervals[i+1][1];
    //         }
    //     }
    //     // Integer[][] ans=new Integer[list.size()][2];
    //     int[][] arr = list.stream()
    //             .map(l -> l.stream().mapToInt(Integer::intValue).toArray())
    //             .toArray(int[][]::new);
    //     return arr;
    // }
}
