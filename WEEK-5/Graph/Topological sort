class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // to store the topo sort
        int[] topo = new int[V];
        //to store indegree
        int[] indegree = new int[V];
    
        // step1: calculating the indegree
        for(int i=0;i<V;i++){
            for(int it:adj.get(i)){
                indegree[it]++;
            }
        }
        
        
        //step2: add in queue the node who has indegree = 0
        Queue<Integer> q = new LinkedList<>();
        for(int i=0;i<V;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        
        //step3 : 
        int idx=0;
        while(!q.isEmpty())
        {
            int node = q.remove();
            topo[idx++]=node;
            
            for(int it : adj.get(node)){
                indegree[it]--;
                if(indegree[it]==0){
                    q.add(it);
                }
            }
        }
        
        return topo;
    }
}
